title: Google Play Deploy
summary: Google Play Deploy
description: |-
  To use this step:

  1. You have to upload the first apk manually (using the web interface or your mom).
    See: https://play.google.com/apps/publish -> All applications -> Add new application

  2. You must link your Google Play Developer Console to an API project.
    See: https://developers.google.com/android-publisher/getting_started. Check the __Linking your API Project section__.

  3. Setting Up API Access Clients, using a service account:
    See: https://developers.google.com/android-publisher/getting_started. Check the __Using a service account__ section.
    When you create your service account on the google developer console, choose json as `Key Type`.

  4. Grant Access to provide the service account the necessary rights.
    See: https://play.google.com/apps/publish -> Settings -> User account & rights -> Invite new user and give the privileges.
    Due to the way the Google Play Publisher API works, you have to grant at least the following permissions to that service account:
     - Edit store listing, pricing & distribution
     - Manage Production APKs
     - Manage Alpha & Beta APKs
     - Manage Alpha & Beta users

  5. OPTIONAL - Add translations for your Store Listing.
    To allow the step to assign your 'whatsnew' files to the uploaded apk version.
    See: https://support.google.com/googleplay/android-developer/answer/3125566?hl=en (Add translations for your Store Listing)
website: https://github.com/bitrise-io/steps-google-play-deploy
source_code_url: https://github.com/bitrise-io/steps-google-play-deploy
support_url: https://github.com/bitrise-io/steps-google-play-deploy/issues
host_os_tags:
  - osx-10.10
  - ubuntu
project_type_tags:
  - android
  - xamarin
  - cordova
  - ionic
  - react-native
type_tags:
  - deploy
is_requires_admin_user: false
is_always_run: false
is_skippable: false
deps:
  brew:
  - name: go
  apt_get:
  - name: golang
    bin_name: go
toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-google-play-deploy
inputs:
  - service_account_json_key_path:
    opts:
      title: Service Account JSON key file path
      description: |-
        Path to the Service Account's JSON key file.

        For remote JSON key file you can provide any download location (ex: `https://URL/TO/key.json`).
        For local JSON key file provide file path url. (ex: `file://PATH/TO/key.json`).
      is_required: true
      is_sensitive: true
  - package_name:
    opts:
      title: Package name
      description: |-
        Package name of the APK or App bundle to deploy.
      is_required: true
  - apk_path: "$BITRISE_APK_PATH"
    opts:
      title: APK or App Bundle file path
      description: |-
        Path to the APK or App Bundle to deploy.

        You can provide multiple APK paths separated by `|` character.

        Format examples:

        - `/path/to/my/app.apk`
        - `/path/to/my/app1.apk|/path/to/my/app2.apk|/path/to/my/app3.apk`
        - `/path/to/my/bundle.aab`
      is_required: true
  - expansionfile_path: ""
    opts:
      title: Expansion file Path
      description: |-
        Path to the expansion file.

        Leave empty or provide exactly the same number of paths as in apk_path, separated by `|` character and start each path with the expansion file's type
        separated by a `:`. (main, patch)

        Format examples:

        - `main:/path/to/my/app.obb`
        - `patch:/path/to/my/app1.obb|main:/path/to/my/app2.obb|main:/path/to/my/app3.obb`
  - track: alpha
    opts:
      title: Track
      summary: The track in which you want to assign the uploaded APK(s).
      description: |-
        The track in which you want to assign the uploaded APK(s). 
        
        Can be one of the built-in tracks: internal, alpha, beta, rollout, production.
        
        Or you can set your custom track name as well. 
        
        For example: `pre-release`, or any of your closed track you added in Google Play Developer Console.
      is_required: true
  - user_fraction: "0.5"
    opts:
      title: User Fraction
      description: |-
        __Only available if `track` is `rollout`.__

        Portion of the users who should get the staged rollout version of the APK.
      value_options:
      - "0.05"
      - "0.1"
      - "0.2"
      - "0.5"
      is_required: true
  - whatsnews_dir:
    opts:
      title: "Directory of localized whatsnew files"
      description: |-
        Use this input to specify localized 'whatsnew' files directory.

        This directory should contain 'whatsnew' files postfixed with the locale.

        whatsnew file name pattern: `whatsnew-LOCALE`

        Example:
        
        ```
        + - [PATH/TO/WHATSNEWS]
            |
            + - whatsnew-en-US
            |
            + - whatsnew-de-DE
        ```

        Format examples:

        - "./"         # whatsnew files are in the repo root directory
        - "./whatsnew" # whatsnew files are in the whatsnew directory
  - mapping_file: "$BITRISE_MAPPING_PATH"
    opts:
      title: Location of your mapping.txt file
      description: |-
        The `mapping.txt` file provides a translation between the original and obfuscated class, method, and field names.
  - untrack_blocking_versions: "true"
    opts:
      title: "Untrack blocking versions?"
      description: |-
        Should deactivate apks, with lower version code, on lower level tracks?

        E.g.: 
        If you have an __active apk on alpha__ track with version code: `42`.
        And you try to __upload a new version (`43`), to the beta track__, you will see an error:

        `Version 42 of this app can not be downloaded by any devices as they will all receive APKs with higher version codes`

        To avoid this issue set this input to: `"true"` and the step will deactivate every apk with lower version code, on lower level tracks.
      value_options:
      - "true"
      - "false"
      is_required: true

